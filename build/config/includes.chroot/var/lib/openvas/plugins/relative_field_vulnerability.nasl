# OpenVAS Vulnerability Test
# $Id: relative_field_vulnerability.nasl 17 2013-10-27 14:01:43Z jan $
# Description: Relative IP Identification number change
#
# Authors:
# Noam Rathaus <noamr@securiteam.com>
# Changes by rd : issue an alert only if some relation has been found.
#
# Copyright:
# Copyright (C) 1999 SecuriTeam
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2,
# as published by the Free Software Foundation
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#

include("revisions-lib.inc");
tag_summary = "The remote host uses non-random IP IDs, that is, it is
possible to predict the next value of the ip_id field of
the ip packets sent by this host.

An attacker may use this feature to determine traffic patterns
within your network.   A few examples (not at all exhaustive) are:
 
1. A remote attacker can determine if the remote host sent a packet 
in reply to another request.  Specifically, an attacker can use your 
server as an unwilling participant in a blind portscan of another 
network.  

2. A remote attacker can roughly determine server requests at certain 
times of the day.  For instance, if the server is sending much more 
traffic after business hours, the server may be a reverse proxy or 
other remote access device.  An attacker can use this information to
concentrate his/her efforts on the more critical machines.

3. A remote attacker can roughly estimate the number of requests that 
a web server processes over a period of time.";

tag_solution = "Contact your vendor for a patch";

if(description)
{
 script_id(10201);
 script_version("$Revision: 17 $");
 script_tag(name:"last_modification", value:"$Date: 2013-10-27 15:01:43 +0100 (Sun, 27 Oct 2013) $");
 script_tag(name:"creation_date", value:"2005-11-03 14:08:04 +0100 (Thu, 03 Nov 2005)");
 script_tag(name:"cvss_base", value:"2.6");
 script_tag(name:"cvss_base_vector", value:"AV:N/AC:H/Au:N/C:P/I:N/A:N");
 script_tag(name:"risk_factor", value:"Medium");
 name = "Relative IP Identification number change";
 script_name(name);
 
 desc = "
 Summary:
 " + tag_summary + "
 Solution:
 " + tag_solution;


 script_description(desc);
 
 summary = "Relative IP Identification number change";
 script_summary(summary);
 
 script_category(ACT_GATHER_INFO);
 
 script_copyright("This script is Copyright (C) 1999 SecuriTeam");
 family = "General";
 script_family(family);
 script_dependencies("os_fingerprint.nasl");
 script_require_keys("Settings/ThoroughTests");
 
 if (revcomp(a: OPENVAS_VERSION, b: "6.0+beta5") >= 0) {
   script_tag(name : "solution" , value : tag_solution);
   script_tag(name : "summary" , value : tag_summary);
 }
 exit(0);
}

#
# The script code starts here
#

include('global_settings.inc');
include('host_details.inc');

if(TARGET_IS_IPV6())exit(0);

# localhost results are bogus
if(islocalhost())exit(0);

if ( thorough_tests == 0 ) exit(0);


if (host_runs("Solaris|Linux Kernel 2\.4") == "yes") exit(0);

#os = get_kb_item("Host/OS/ICMP");
#if(os)
#{
# if(egrep(pattern:"Solaris|Linux Kernel 2\.4", string:os, icase:TRUE))exit(0); 
#}
#else
#{
# os = get_kb_item("SNMP/sysDesc");
# if(os)
# {
# if(egrep(pattern:"SunOS|Linux 2\.4", string:os))exit(0);
# }
#}


srcaddr = this_host();
dstaddr = get_host_ip();

IPH = 20;
IP_LEN = IPH; 

ip = forge_ip_packet(   ip_v : 4,
			ip_hl : 5,
			ip_tos : 0,
			ip_len : IP_LEN, 
		        ip_id : 0xABA,
			ip_p : IPPROTO_TCP,
			ip_ttl : 255,
		        ip_off : 0,
			ip_src : srcaddr,
			ip_dst : dstaddr);

port = get_host_open_port();
if(!port)port = 137;

soc = open_sock_tcp(port);
if ( ! soc ) exit(0);
close ( soc );
 
tcpip = forge_tcp_packet(    ip       : ip,
                             th_sport : port,
                             th_dport : port,
                             th_flags : TH_SYN,
                             th_seq   : 0xF1C,
                             th_ack   : 0,
                             th_x2    : 0,
                             th_off   : 5,
                             th_win   : 512,
                             th_urp   : 0);

filter = string("tcp and src host ", dstaddr, " and dst host ", srcaddr, " and dst port ", port, " and src port ", port); 



relative = "-1";  
answer_count = 0;
for(i=0;i<10;i=i+1){
	r[i]="";
	o[i]="";
	}
for (packet_count = 0; packet_count < 10; packet_count = packet_count + 1)  
{
 result = send_packet(tcpip, pcap_active:TRUE, pcap_filter:filter);
 if ((packet_count > 3) && (answer_count == 0))
 {
  exit(0);
 }

 if (result)
 {
  ip_id = get_ip_element(ip:result, element:"ip_id");
  if(ip_id != 0 )
  {
   answer_count = answer_count + 1;
   if (relative == "-1")
   {
    relative = ip_id;
   }
   else
   {
   if(ip_id > relative){
   	max = ip_id;
	min = relative;
	}
   else {
   	max = relative;
	min = ip_id;
	}
   relative = max - min;
   r[answer_count-1] = relative;
   o[answer_count-1] = ip_id;
   relative = ip_id;
   }
  }
 }
}

ok = 1;

if(answer_count)
{


#
# Added by rd :
#

#
# if the ids are relative, then, we have a relation such as :
#
# 
#  n      =  n   +  m
#   i + 1      i
#
#
# with n   = i'th ip_id
#       i 
#
#
#
# so, we have :
# 
#  n      = n   + k*m
#   i + k    i 
#
#
# So it's pretty easy to find if ip_ids are relatives or not.
#

ni = 0;
m  = 0;
start = 0;
for(i=0;i<10;i=i+1)
{
 if(o[i]){
 	start = i;
	ni = o[i];
	i = 10;
	}
}

for(i=start+1;i<10;i=i+1)
{
 if(o[i])
 	{
	 if(o[i] > ni)
	  {
	   mx = o[i];
	   mn = ni;
	  }
	 else
	  {
	   mx = ni;
	   mn = o[i];
	  }
	  
	  m = mx - mn;
	  start = i;
	  i = 10;
	 }
}

ok = 1;
for(i=start+1;i<10;i=i+1)
{
 if(o[i])
 {
   if(o[i] > ni)
	  {
	   mx = o[i];
	   mn = ni;
	  }
	 else
	  {
	   mx = ni;
	   mn = o[i];
	  }
	  
	  km = mx - mn;
	  
	  #
	  # n  = n  + k x m
	  #  k    i 
	  #
	  # This implies that km % m = 0
	  # 
	  if(km % m){
	  	ok = 0;
		i = 1000;
		}
	 }
 }

#
#  end of rd's addition
#  
#



if(ok)security_warning(0);

}
